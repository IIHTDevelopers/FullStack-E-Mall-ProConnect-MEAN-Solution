blogcontrollerBoundaryTestShouldReturn401UnauthorizedWhenTryingToAccessPost/createProtectedRoutesWithoutAToken=true
blogcontrollerBoundaryTestShouldReturn401UnauthorizedWhenTryingToAccessPut/:idProtectedRoutesWithoutAToken=true
blogcontrollerBoundaryTestShouldReturn401UnauthorizedWhenTryingToAccessDelete/:idProtectedRoutesWithoutAToken=true
blogcontrollerBoundaryTestShouldReturn401UnauthorizedWhenTryingToAccessPost/:id/commentsProtectedRoutesWithoutAToken=true
blogcontrollerBoundaryTestShouldReturn401UnauthorizedWhenTryingToAccessPut/:id/comments/:commentidProtectedRoutesWithoutAToken=true
blogcontrollerBoundaryTestShouldReturn401UnauthorizedWhenTryingToAccessDelete/:id/comments/:commentidProtectedRoutesWithoutAToken=true
blogcontrollerBoundaryTestShouldReturn401UnauthorizedWhenTryingToAccessPut/:id/likeProtectedRoutesWithoutAToken=true
blogcontrollerBoundaryTestShouldCreateANewBlogPost=true
blogcontrollerBoundaryTestShouldRetrieveABlogPostById=true
blogcontrollerBoundaryTestShouldUpdateABlogPostById=true
blogcontrollerBoundaryTestShouldDeleteABlogPostById=true
blogcontrollerBoundaryTestShouldReturnA404ErrorWhenGettingABlogPostWithInvalidId=true
blogcontrollerBoundaryTestShouldReturnA404ErrorWhenUpdatingABlogPostWithInvalidId=true
blogcontrollerBoundaryTestShouldReturnA404ErrorWhenDeletingABlogPostWithInvalidId=true
blogcontrollerBoundaryTestShouldReturnA500ErrorWhenCreatingABlogPostFails=true
blogcontrollerBoundaryTestShouldReturnA404ErrorWhenDeletingABlogPostWithInvalidId=true
blogcontrollerBoundaryTestShouldAddACommentToABlogPost=true
blogcontrollerBoundaryTestShouldEditACommentOnABlogPost=true
blogcontrollerBoundaryTestShouldDeleteACommentOnABlogPost=true
blogcontrollerBoundaryTestShouldGetAListOfAllBlogCategories=true
blogcontrollerBoundaryTestShouldGetTheCommentCountOfABlogPost=true
blogcontrollerBoundaryTestShouldAddACommentToABlogPost=true
blogcontrollerBoundaryTestShouldEditACommentOnABlogPost=true
blogcontrollerBoundaryTestShouldDeleteACommentOnABlogPost=true
productcontrollerBoundaryTestShouldReturn401UnauthorizedWhenTryingToAccessPost/createProtectedRoutesWithoutAToken=true
productcontrollerBoundaryTestShouldReturn401UnauthorizedWhenTryingToAccessGet/top-rated/:limitProtectedRoutesWithoutAToken=true
productcontrollerBoundaryTestShouldReturn401UnauthorizedWhenTryingToAccessPost/discount/1234ProtectedRoutesWithoutAToken=true
productcontrollerBoundaryTestShouldReturn401UnauthorizedWhenTryingToAccessGet/cart/:useridProtectedRoutesWithoutAToken=true
productcontrollerBoundaryTestShouldReturn401UnauthorizedWhenTryingToAccessPost/cart/add/:useridProtectedRoutesWithoutAToken=true
productcontrollerBoundaryTestShouldReturn401UnauthorizedWhenTryingToAccessPost/cart/checkout/:useridProtectedRoutesWithoutAToken=true
productcontrollerBoundaryTestShouldReturn401UnauthorizedWhenTryingToAccessPut/cart/update/:userid/:itemidProtectedRoutesWithoutAToken=true
productcontrollerBoundaryTestShouldReturn401UnauthorizedWhenTryingToAccessDelete/cart/remove/:userid/:itemidProtectedRoutesWithoutAToken=true
productcontrollerBoundaryTestShouldReturn401UnauthorizedWhenTryingToAccessDelete/:idProtectedRoutesWithoutAToken=true
productcontrollerBoundaryTestShouldCreateANewProduct=true
productcontrollerBoundaryTestShouldRetrieveAProductById=true
productcontrollerBoundaryTestShouldUpdateAProductById=true
productcontrollerBoundaryTestShouldDeleteAProductById=true
productcontrollerBoundaryTestShouldReturnA404ErrorWhenGettingProductWithInvalidId=true
productcontrollerBoundaryTestShouldReturnA404ErrorWhenUpdatingProductWithInvalidId=true
productcontrollerBoundaryTestShouldReturnA404ErrorWhenDeletingProductWithInvalidId=true
productcontrollerBoundaryTestShouldUpdateAProductById=true
productcontrollerBoundaryTestShouldDeleteAProductById=true
productcontrollerBoundaryTestShouldReturnA404ErrorWhenGettingProductByInvalidId=true
productcontrollerBoundaryTestShouldReturnA404ErrorWhenUpdatingProductByInvalidId=true
productcontrollerBoundaryTestShouldReturnA404ErrorWhenDeletingProductWithInvalidId=true
productcontrollerBoundaryTestShouldRetrieveAllProducts=true
productcontrollerBoundaryTestShouldHandleErrorWhenRetrievingAllProducts=true
productcontrollerBoundaryTestShouldRetrieveTopRatedProducts=true
productcontrollerBoundaryTestShouldHandleErrorWhenRetrievingTopRatedProducts=true
productcontrollerBoundaryTestShouldSearchForProductsByNameAndDescription=true
productcontrollerBoundaryTestShouldHandleErrorWhenSearchingForProducts=true
productcontrollerBoundaryTestShouldApplyADiscountToTheCart=true
productcontrollerBoundaryTestShouldHandleErrorWhenApplyingADiscount=true
productcontrollerBoundaryTestShouldViewTheCartForAUser=true
productcontrollerBoundaryTestShouldHandleErrorWhenViewingTheCart=true
productcontrollerBoundaryTestShouldUpdateACartItemForAUser=true
productcontrollerBoundaryTestShouldHandleErrorWhenUpdatingACartItem=true
productcontrollerBoundaryTestShouldRemoveACartItemForAUser=true
productcontrollerBoundaryTestShouldHandleErrorWhenRemovingACartItem=true
userscontrollerBoundaryTestShouldReturn401UnauthorizedWhenTryingToAccess/createProtectedRoutesWithoutAToken=true
userscontrollerBoundaryTestShouldReturn401UnauthorizedWhenTryingToAccessGet/:idProtectedRoutesWithoutAToken=true
userscontrollerBoundaryTestShouldReturn401UnauthorizedWhenTryingToAccessPut/:idProtectedRoutesWithoutAToken=true
userscontrollerBoundaryTestShouldReturn401UnauthorizedWhenTryingToAccessDelete/:idProtectedRoutesWithoutAToken=true
userscontrollerBoundaryTestShouldReturn401UnauthorizedWhenTryingToAccess/:id/activityProtectedRoutesWithoutAToken=true
userscontrollerBoundaryTestShouldReturn401UnauthorizedWhenTryingToAccess/:id/favoritesProtectedRoutesWithoutAToken=true
userscontrollerBoundaryTestShouldReturn401UnauthorizedWhenTryingToAccessPut/change-password/:idProtectedRoutesWithoutAToken=true
userscontrollerBoundaryTestShouldReturn401UnauthorizedWhenTryingToAccess/email/:emailProtectedRoutesWithoutAToken=true
userscontrollerBoundaryTestShouldReturnA400ErrorIfEmailIsAlreadyInUse=true
userscontrollerBoundaryTestShouldRetrieveAUserProfileById=true
userscontrollerBoundaryTestShouldUpdateAUserProfileById=true
userscontrollerBoundaryTestShouldDeleteAUserById=true
userscontrollerBoundaryTestShouldReturnA404ErrorWhenGettingUserProfileWithInvalidId=true
userscontrollerBoundaryTestShouldReturnA404ErrorWhenUpdatingUserProfileWithInvalidId=true
userscontrollerBoundaryTestShouldReturnA404ErrorWhenDeletingUserWithInvalidId=true
userscontrollerBoundaryTestShouldReturnA400ErrorWhenCreatingANewUserWithMissingRequiredFields=true
userscontrollerBoundaryTestShouldReturnA400ErrorWhenChangingUserPasswordWithMissingNewpassword=true
userscontrollerBoundaryTestShouldReturnA500ErrorWhenFailingToChangeUserPassword=true
userscontrollerBoundaryTestShouldRetrieveUserFavoritesById=true
userscontrollerBoundaryTestShouldReturnA500ErrorWhenFailingToRetrieveUserFavorites=true
userscontrollerBoundaryTestShouldRetrieveUserActivityById=true
userscontrollerBoundaryTestShouldReturnA500ErrorWhenFailingToRetrieveUserActivity=true
userscontrollerBoundaryTestShouldRetrieveAUserByEmail=true
userscontrollerBoundaryTestShouldReturnA500ErrorWhenFailingToRetrieveUserByEmail=true
ordercontrollerBoundaryTestShouldReturn401UnauthorizedWhenTryingToAccessGet/allProtectedRoutesWithoutAToken=true
ordercontrollerBoundaryTestShouldReturn401UnauthorizedWhenTryingToAccessPost/createProtectedRoutesWithoutAToken=true
ordercontrollerBoundaryTestShouldReturn401UnauthorizedWhenTryingToAccessGet/:idProtectedRoutesWithoutAToken=true
ordercontrollerBoundaryTestShouldReturn401UnauthorizedWhenTryingToAccessDelete/:idProtectedRoutesWithoutAToken=true
ordercontrollerBoundaryTestShouldReturn401UnauthorizedWhenTryingToAccessGet/user/:useridProtectedRoutesWithoutAToken=true
ordercontrollerBoundaryTestShouldReturn401UnauthorizedWhenTryingToAccessDelete/cancel/:idProtectedRoutesWithoutAToken=true
ordercontrollerBoundaryTestShouldReturn401UnauthorizedWhenTryingToAccessGet/:id/paymentProtectedRoutesWithoutAToken=true
ordercontrollerBoundaryTestShouldReturn401UnauthorizedWhenTryingToAccessPost/:id/payProtectedRoutesWithoutAToken=true
ordercontrollerBoundaryTestShouldReturn401UnauthorizedWhenTryingToAccessGet/analyticsProtectedRoutesWithoutAToken=true
ordercontrollerBoundaryTestShouldReturn401UnauthorizedWhenTryingToAccessGet/:id/invoiceProtectedRoutesWithoutAToken=true
ordercontrollerBoundaryTestShouldReturn401UnauthorizedWhenTryingToAccessGet/:id/shipmentProtectedRoutesWithoutAToken=true
ordercontrollerBoundaryTestShouldReturn401UnauthorizedWhenTryingToAccessGet/revenueProtectedRoutesWithoutAToken=true
ordercontrollerBoundaryTestShouldReturn401UnauthorizedWhenTryingToAccessGet/ordered/:userid/:productidProtectedRoutesWithoutAToken=true
ordercontrollerBoundaryTestShouldCreateANewOrder=true
ordercontrollerBoundaryTestShouldRetrieveAnOrderById=true
ordercontrollerBoundaryTestShouldUpdateAnOrderById=true
ordercontrollerBoundaryTestShouldDeleteAnOrderById=true
ordercontrollerBoundaryTestShouldReturnA404ErrorWhenGettingAnOrderWithInvalidId=true
ordercontrollerBoundaryTestShouldReturnA404ErrorWhenUpdatingAnOrderWithInvalidId=true
ordercontrollerBoundaryTestShouldReturnA404ErrorWhenDeletingAnOrderWithInvalidId=true
ordercontrollerBoundaryTestShouldReturnA500ErrorWhenCreatingAnOrderFails=true
ordercontrollerBoundaryTestShouldReturnA404ErrorWhenDeletingAnOrderWithInvalidId=true
ordercontrollerBoundaryTestShouldRetrieveUser'sOrdersByUserId=true
ordercontrollerBoundaryTestShouldCancelAnOrderById=true
ordercontrollerBoundaryTestShouldRetrievePaymentDetailsForAnOrderById=true
ordercontrollerBoundaryTestShouldProcessPaymentForAnOrderById=true
ordercontrollerBoundaryTestShouldRetrieveOrderAnalytics=true
ordercontrollerBoundaryTestShouldGenerateAnInvoiceForAnOrderById=true
ordercontrollerBoundaryTestShouldTrackShipmentForAnOrderById=true
ordercontrollerBoundaryTestShouldRetrieveRevenueAnalytics=true
admincontrollerBoundaryTestGet/usersShouldReturnAListOfUsers=true
admincontrollerBoundaryTestGet/productsShouldReturnAListOfProducts=true
admincontrollerBoundaryTestGet/ordersShouldReturnAListOfOrders=true
admincontrollerBoundaryTestGet/blogsShouldReturnAListOfBlogPosts=true
admincontrollerBoundaryTestGet/dashboardShouldReturnDashboardData=true
admincontrollerBoundaryTestGet/reportsShouldReturnReportsData=true
admincontrollerBoundaryTestGet/reports/salesShouldReturnSalesReportsData=true
